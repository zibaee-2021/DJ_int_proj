"""
"A topology file is always required for loading data into a Universe.
A topology file lists atoms, residues, and their connectivity.
MDAnalysis accepts the PSF, PDB, CRD, and GRO formats.
A topology file can then be followed by any number of trajectory files.
A trajectory file contains a list of coordinates in the order defined in the topology.
If no trajectory files are given, then only a structure is loaded.
If multiple trajectory files are given, the trajectories are concatenated in the given order.
MDAnalysis accepts single frames (e.g. PDB, CRD, GRO) and timeseries data (e.g. DCD, XTC, TRR, XYZ)."
"""


# NOTE: CODE BELOW IS BASED ON THAT INITIALLY GENERATED BY CG4o
import os, sys
from time import time
import MDAnalysis as mda
import mdtraj as mdj
from src.utils import cif_parsr as cp
import json

def validate_atom_counts(pdb_path, xtc_path):
    """
    Compare the atom counts and report.
    """
    def get_pdb_atom_count(pdb_path):
        u = mda.Universe(pdb_path)
        return len(u.atoms)
    n_pdb = get_pdb_atom_count(pdb_path)

    def get_xtc_atom_count(xtc_path):
        u = mda.Universe(xtc_path)
        return len(u.atoms)
    n_xtc = get_xtc_atom_count(xtc_path)

    print(f"PDB atoms: {n_pdb}")
    print(f"XTC atoms: {n_xtc}")

    if n_pdb != n_xtc:
        print("Atom counts do NOT match! Aborting.")
        sys.exit(1)
    else:
        print("Atom counts match.")
    return True

def validate_filepaths(fpath: str):
    if not os.path.isfile(fpath):
        print(f"Missing pdb/xtc file: {fpath}")
        sys.exit(1)

def load_universe_if_valid(pdbid_chain):
    """
    Check counts and load MDAnalysis Universe.
    """
    rpath_pdbid_chain = os.path.join('..', 'data', 'ATLAS_downloads', 'ATLAS', pdbid_chain, 'protein', pdbid_chain)
    pdb_path = f'{rpath_pdbid_chain}.pdb'
    validate_filepaths(pdb_path)
    xtc_path = f'{rpath_pdbid_chain}_prod_R2_fit.xtc'
    validate_filepaths(xtc_path)

    validate_atom_counts(pdb_path, xtc_path)

    u = mda.Universe(pdb_path, xtc_path)
    print("Loaded Universe successfully.")
    # Basic info
    print("Number of atoms:", len(u.atoms))
    print("Number of residues:", len(u.residues))
    print("Number of trajectory frames:", len(u.trajectory))
    print("Time step (ps):", u.trajectory.dt)
    return u

def save_snapshots_as_pdbs(pdbid_chain, univ_pdbid_chain):
    rpath_pdbchain_dir = os.path.join('..', 'data', 'ATLAS_parsed', pdbid_chain)
    os.makedirs(rpath_pdbchain_dir, exist_ok=True)

    frame_idx = univ_pdbid_chain.trajectory.frame  # current frame index
    print(f'Current frame_idx={frame_idx}')
    rpath_pdb_frame = os.path.join(rpath_pdbchain_dir, f'snapshot_frame{frame_idx}.pdb')
    with mda.Writer(rpath_pdb_frame) as W:
        W.write(univ_pdbid_chain.atoms)
    print(rpath_pdb_frame)